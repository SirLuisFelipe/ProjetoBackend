openapi: 3.0.0
info:
  title: Project API
  description: API for booking dates to skate on a skatepark.
  version: 1.0.0
  contact:
    name: Luis Felipe
    email: lipalhos@gmail.com
servers:
  - url: http://localhost:8080/reservation
    description: Local server

tags:
  - name: Auth Service
    description: Endpoints for authentication and user registration
  - name: Payment Service
    description: Endpoints for managing payments
  - name: Scheduling Service
    description: Endpoints for scheduling management
  - name: Track Service
    description: Endpoints for track management
  - name: User Service
    description: Endpoints for user management

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        cpf:
          type: string
        role:
          type: string
        encodedPassword:
          type: string

    UserRegisterDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        cpf:
          type: string
        password:
          type: string
        role:
          type: string

    UserEditDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        cpf:
          type: string
        password:
          type: string
        role:
          type: string

    UserLoginDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    AuthResponseDto:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string

    Payment:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    CreateSchedulingDto:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        paymentId:
          type: integer
        trackId:
          type: integer
        scheduledTimeStart:
          type: string
          format: date-time
          example: 2021-10-10T10:00:00
        scheduledTimeEnd:
          type: string
          format: date-time
          example: 2021-10-10T11:00:00
        paymentValue:
          type: number
          format: float

    Scheduling:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        payment:
          $ref: '#/components/schemas/Payment'
        track:
          $ref: '#/components/schemas/Track'
        scheduledTimeStart:
          type: string
          format: date-time
          example: 2021-10-10T10:00:00
        scheduledTimeEnd:
          type: string
          format: date-time
          example: 2021-10-10T10:00:00
        paymentValue:
          type: number
          format: float

    Track:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

paths:
  /auth/register:
    post:
      tags:
        - Auth Service
      summary: Registers a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterDto'
      responses:
        '200':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '500':
          description: Server error

  /auth/login:
    post:
      tags:
        - Auth Service
      summary: Authenticates a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '500':
          description: Server error

  /payment/:
    post:
      tags:
        - Payment Service
      summary: Creates a new payment
      operationId: createPayment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Payment successfully created
        '500':
          description: Server error
    get:
      tags:
        - Payment Service
      summary: Lists all payments
      operationId: listPayments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Payment list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '500':
          description: Server error

  /payment/{id}:
    get:
      tags:
        - Payment Service
      summary: Retrieves a payment by ID
      operationId: getPaymentById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '500':
          description: Server error
    delete:
      tags:
        - Payment Service
      summary: Deletes a payment by ID
      operationId: deletePaymentById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment successfully deleted
        '500':
          description: Server error

  /scheduling/:
    post:
      tags:
        - Scheduling Service
      summary: Creates a new schedule
      operationId: createScheduling
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSchedulingDto'
      responses:
        '200':
          description: Schedule successfully created
        '500':
          description: Server error
    put:
      tags:
        - Scheduling Service
      summary: Updates a schedule
      operationId: updateScheduling
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSchedulingDto'
      responses:
        '200':
          description: Schedule successfully updated
        '500':
          description: Server error
    get:
      tags:
        - Scheduling Service
      summary: Lists all schedules
      operationId: listSchedulings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Schedule list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scheduling'
        '500':
          description: Server error

  /scheduling/{id}:
    get:
      tags:
        - Scheduling Service
      summary: Retrieves a schedule by ID
      operationId: getSchedulingById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Schedule found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scheduling'
        '500':
          description: Server error
    delete:
      tags:
        - Scheduling Service
      summary: Deletes a schedule by ID
      operationId: deleteSchedulingById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Schedule successfully deleted
        '500':
          description: Server error

  /track/:
    post:
      tags:
        - Track Service
      summary: Creates a new track
      operationId: createTrack
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Track successfully created
        '500':
          description: Server error
    get:
      tags:
        - Track Service
      summary: Lists all tracks
      operationId: listTracks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Track list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '500':
          description: Server error

  /track/{id}:
    get:
      tags:
        - Track Service
      summary: Retrieves a track by ID
      operationId: getTrackById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Track found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '500':
          description: Server error
    delete:
      tags:
        - Track Service
      summary: Deletes a track by ID
      operationId: deleteTrackById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Track successfully deleted
        '500':
          description: Server error

  /user/:
    put:
      tags:
        - User Service
      summary: Updates a user
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEditDto'
      responses:
        '200':
          description: User successfully updated
        '500':
          description: Server error
    get:
      tags:
        - User Service
      summary: Lists all users
      operationId: listUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error

  /user/id/{id}:
    get:
      tags:
        - User Service
      summary: Retrieves a user by ID
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Server error
  /user/search:
    get:
      tags:
        - User Service
      summary: Retrieves a user by Name
      operationId: getUserByName
      security:
        - bearerAuth: [ ]
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Server error
    delete:
      tags:
        - User Service
      summary: Deletes a user by ID
      operationId: deleteUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User successfully deleted
        '500':
          description: Server error
